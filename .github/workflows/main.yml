name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: "*"

jobs:
  build_extensions:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        example:
          - hello-world
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Path filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            extension:
              - '${{ matrix.example }}/**'
      - name: Cache lerna
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-lerna-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-lerna-
      - name: Check config files
        if: steps.filter.outputs.extension == 'true'
        run: |
          diff hello-world/tsconfig.json ${EXAMPLE_FOLDER}/tsconfig.json
          diff hello-world/.eslintignore ${EXAMPLE_FOLDER}/.eslintignore
          diff hello-world/.eslintrc.js ${EXAMPLE_FOLDER}/.eslintrc.js
          diff hello-world/.gitignore ${EXAMPLE_FOLDER}/.gitignore
        env:
          EXAMPLE_FOLDER: ${{ matrix.example }}
        shell: bash
      - name: Install node
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-node@v2
        with:
          node-version: "12.x"
      - name: Install Python
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"
      - name: Get pip cache dir
        if: steps.filter.outputs.extension == 'true'
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
        shell: bash
      - name: Cache pip
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          python -m pip install --upgrade pip jupyter_packaging~=0.7.9 jupyterlab~=3.0
      - name: Install the NPM dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd ${EXAMPLE_FOLDER}
          yarn
        env:
          EXAMPLE_FOLDER: ${{ matrix.example }}
        shell: bash
      - name: Lint the files
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd ${EXAMPLE_FOLDER}
          yarn run lint:check
        env:
          EXAMPLE_FOLDER: ${{ matrix.example }}
        shell: bash
      - name: Build and check by extension
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd ${EXAMPLE_FOLDER}
          pip install -e .
          jupyter labextension list 2>&1 | grep -ie "@jupyter-widget-examples/*.*OK"
          python -m jupyterlab.browser_check
          pip uninstall -y $(python setup.py --name)
        env:
          EXAMPLE_FOLDER: ${{ matrix.example }}
        shell: bash

  build_all:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache lerna
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-lerna-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-lerna-
      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: "12.x"
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
        shell: bash
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        run: python -m pip install jupyter_packaging~=0.7.9 jupyterlab~=3.0 pytest pytest-check-links
      - name: Bootstrap the dependencies
        run: yarn
      - name: Build all the extensions
        run: |
          yarn install-py
          yarn build-ext
          yarn lint:check
          # Check links as last step as new tutorial may set links not yet valid (like file not yet in master)
          pytest --check-links
